{
    "collab_server" : "",
    "contents" : "```{r}\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary( reshape )\n\n```\n1. Hacer FastOrtho de MIBiG\nHecho. El resultado está en FASTORTHO/MiBIG.fastortho incluyendo PKS y NRPS. \n<!--NumGenes vs Familias-->  \n\n2. Hacer Pfam de MIBiG\nHecho, el archivo MIBIG-Pfam.out contiene el resultado de aplicar PfamScan sobre las secuencias de aminoácidos MIBiG. El archivo  MIBIG-Pfam.out.mod está modificado cambiando espacios por tabuladores para facilitar su manipulación.  \n\n3. Seleccionar las primeras n familias no PKS o NRPS (grep | cut -d ..etc)  \n<!--\ngrep -o NRPS |grep -o pKS ????\nSe buscó tanto acrónimo como completo non ribosomal, NRP etc\n-->\nDespués se realizó un filtrado que se guardó en SELECTION.fastortho elimininando NRPS PKS según su anotación en MIBiG. Finalmente el archivo ABUNDANT10.fastortho contiene las 10 familias más abundantes que NO son PKS ni NRPS.   \n\nPara cada familia queremos realizar un boxplot incluyendo datos de # dominios pfam  \nPara ello necesit amos una tabla tipo (Estamos aqui)  \nGen1_1\t#dominio  \nGen1_2\t#dominio  \n\n<!--OBJETIVO 1 Familia vs número de dominios-->\n\nCada renglón es un registro de un gen, la primera columna dice a qué familia pertenece y la segunda columna cuántos dominios tiene.   \n\nAhora sí graficaremos el boxplot de esta tabla en R  \n<!--- PENDIENTES\n1 LA FUNCION POR GEN\n2 EL NUMERO DE GENES POR FAMILIA \n-->\n  <!--- mision 1 -->\n```{r NumDominiosPorFamilia}\n## Alan hay que entregar la tabla ordenada numéricamente  para eso puedes utilizar los siguientes comandos\n## perl -p -i -e  's/fam//' file_ordered.csv\n## sort -n file >file_ordered2.csv \n## perl -p -i -e  's/^/Fam/' file_ordered2.csv\n\n## Los archivos deben estar en plots\n### Después escoges \nfile=\"FIRSTmission_MOD4.csv\"\nfile = \"../OUTPUTS/families20firstmission_ordered2.csv\"\nfile=\"families20firstmission_ordered2.csv\"\n\n\nFIRSTmissionTable <- read_delim(file, \"\\t\", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)\nhead(FIRSTmissionTable)\n#Familia1 numDominios\n#Cada renglón es una ocurrencia de un gen de la familia 1\ncolnames(FIRSTmissionTable)=c(\"family\",\"domains_number\")\nFIRSTmissionTable$Ordenado<-factor(FIRSTmissionTable$family, unique(as.character(FIRSTmissionTable$family)))\np<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.28,alpha=0.028)+xlab(\"Gene families\")+ylab(\"Number of domains\")+theme(axis.text.x = element_text(size = 6))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = \"none\",panel.background = element_rect(fill = \"white\",colour = \"grey50\"))\np\np+theme(plot.margin = unit(c(1,1,1.5,1.2),\"cm\"))\nggsave(\"DomainDistro1-20first.svg\",plot = p,width=30,height = 15,units = \"cm\")\n\n\n```\n<!--- FIN OBJETIVO 1-->\n\n\n<!--- OBJETIVO 2 Dominio vs NumFamilias\ncotntar ocurrencia unicas dominio, familia -->\n5. También sería interesante qué dominios son (Luego se puede graficar por dominio  )\nEje x dominio 1, dominio 2 ...\nEje y \n\n```{r}\n#ggplot(FIRSTmission_MOD2,aes(x=family,y=domains_number,fill=family,color=cyl)) + geom_point()+geom_jitter(width=0.3,alpha=0.05)  + xlab(\"family\")\n\n\nTableDomain <- read_delim(\"../OUTPUTS/FILTER/thirdmission50_ordered.csv\", \"\\t\", escape_double = FALSE, trim_ws = TRUE)\ncolnames(TableDomain)=c(\"Family\",\"Gen\",\"GenId\",\"Pld\",\"DomainName\",\"Type\",\"Clan\",\"MembersFamily\")\nTableDomain$OrdenTD<-factor(TableDomain$Family, unique(as.character(TableDomain$Family)))\ncuenta2<-count(TableDomain,c(\"Family\",\"Gen\",\"DomainName\"))\ncuenta2\ncuenta2$Orden<-factor(cuenta2$Family, unique(as.character(TableDomain$Family)))\n\np <- ggplot(cuenta2, aes(Orden, freq)) + geom_point(size = 0.1) + geom_jitter(aes(colour = DomainName),width=0.4,alpha=0.7,shape = 8)+ theme(legend.position = \"none\")\np\np+ theme(legend.position = \"right\")\n\n#ggplot(FIRSTmission_MOD2,aes(x=family,y=domains_number,fill=family,color=cyl)) + geom_point()+geom_jitter(width=0.3,alpha=0.05)  + xlab(\"family\")\n\n\nTableDomain <- read_delim(\"../OUTPUTS/FILTER/thirdmission117_ordered.csv\", \"\\t\", escape_double = FALSE, trim_ws = TRUE)\ncolnames(TableDomain)=c(\"Family\",\"Gen\",\"GenId\",\"Pld\",\"DomainName\",\"Type\",\"Clan\",\"MembersFamily\")\nTableDomain$OrdenTD<-factor(TableDomain$Family, unique(as.character(TableDomain$Family)))\ncuenta2<-count(TableDomain,c(\"Family\",\"Gen\",\"DomainName\"))\ncuenta2\ncuenta2$Orden<-factor(cuenta2$Family, unique(as.character(TableDomain$Family)))\n\nh <- ggplot(cuenta2, aes(x=Orden, y=freq)) + geom_point(size = 0.1) + geom_jitter(aes(colour = DomainName),width=0.4,alpha=0.7,shape = 8)+ theme(legend.position = \"none\",axis.text.x = element_text(size = 5))\nh\nh+ theme(legend.position = \"right\")\nggsave(\"DomainFreqLONGmem117.pdf\",plot = h,width=30,height = 15,units = \"cm\")\n\n\n```\n\n```{r}\nTableDomain\nDomTable<-count(TableDomain,c(\"Family\",\"DomainName\"))\n\nDominios<-TableDomain\nDominios$freq<-NULL\nDomainCount<-count(Dominios,c(\"DomainName\"))\nDomainCount\n#order(count(Dominios,c(\"DomainName\")))\n#Dominios$DomainName<-factor(Dominios$DomainName, levels = Dominios$DomainName[order(count(Dominios,c(\"DomainName\")))])\nggplot(DomainCount, aes(x=reorder(DomainName,-freq),y=freq)) + geom_histogram(stat = \"identity\") +  theme(axis.text.x = element_text(angle = 90))\n\n\n```\n\nDominio1\t#Veces en Familia1   \nDominio1\t#Veces en Familia 2   \n….  \nDominio1\t#VecesTotales  \nDominio2\t#VecesFamilia1   \n<!-- Fin objetivo 2-->\n\n\n<!-- Objetivo 3-->\n<!--Incidencia de Familias por Dominios-->\n```{r}\n## Objetivo Contar ocurrencias de dominio por familia y obtener la frecuencia de dominio por familia \n## Data frame \n# Dominio Familia OcurrenciaRelativa\n\nHeadTable<-head(TableDomain,10)\nHeadTable\nHeadTable[5,1]<-\"fam2\"\nHeadTable[6,1]<-\"fam2\"\nHeadTable[5,\"MembersFamily\"]<-\"50\"\nHeadTable[6,\"MembersFamily\"]<-\"50\"\nHeadTable$Percentage<-HeadTable$MembersFamily\n\nHeadTable\n#HeadTable.m<-melt(HeadTable)\n#TailTable\n#ShortTable<-join(HeadTable,TailTable,by.x = \"DomainName\",by.y = \"DomainName\")\n#ShortTable\nDomTable<-count(TableDomain,c(\"Family\",\"DomainName\"))\n#Dominios2<-count(TableDomain,c(\"Family\",\"DomainName\"))\n\nDominios<-DomTable\nDominios$freq<-NULL\nGenes=count(TableDomain,c(\"Family\"))\n\n#Dominios2<-count(TableDomain,c(\"Family\",\"DomainName\"))\n#Dominios2$freq<-NULL\nGenes=count(TableDomain,c(\"Family\"))\n\n\n## Funcion que regrese para cada familia y dominio su frecuencia \nFrecuenciaDominioFamilia<-function(x){\n  #x is a row x[1]=Family x[2]=DomainName\n  familia<-x[1]\n  dominio<-x[2]\n  \n NumGenes<-(Genes$freq[which(Genes$Family==familia)]) \n#result<-NumGenes\n  ## contar genes familia\n FreqDom<-DomTable$freq[which(DomTable$Family==familia & DomTable$DomainName==dominio)]\n result<-FreqDom/NumGenes\n return(result)\n}\n\nDomTable$DomFreq<-apply(DomTable,1,FrecuenciaDominioFamilia)\n\nggplot(DomTable, aes(x=reorder(DomainName,-DomFreq),y=DomTable$DomFreq,fill=DomTable$Family)) +geom_bar(stat = \"identity\")+  theme(axis.text.x = element_text(angle = 90))\n\n\n```\n\n",
    "created" : 1568331242287.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2428027315",
    "id" : "AB741F09",
    "lastKnownWriteTime" : 1561999998,
    "last_content_update" : 1561999998,
    "path" : "/media/strain/disco2/Alun/GIT/domains/PLOTS/GraficosDominios.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}